you
you
you
you
you
you
Can you hear me?
So, welcome. My name is Nadir.
We're gonna have a nice interview today, hopefully.
So we will start by a very brief introduction from myself, from yourself.
Very brief, it's not like the interview, but to get to know each other a bit.
And then we will go on the coder paddling you've been given.
a smaller react application together. Is that fine for you?
Okay, so my name is Nadir, I've been working at Datadog for eight years and a half, nine years.
So front-end engineer worked on the API application performance.
monitoring, on the design system, on the architecture of the
and I'm now back in product, in on-call product that we have.
we launched one year ago. Over to you.
. .
Thank you.
. .
. .
Okay.
. .
. .
. .
Okay, so that's all for me. So let's go on the
I will ask you to share your screen if you're okay with this, it's just to simplify things.
to help you to get used to the interface. Don't worry, you can look up stuff on the web.
If you need to, if you're missing APIs or anything, it's fine to look up for them.
If you share your screen, that would be nice.
Yeah, in the calendar interview.
. .
. .
. .
Thank you.
Thank you.
We'll use my AirPods also. Wait.
So with my computer, just to have a better sound.
Thank you. Bye.
you
Can you hear me?
Hello? Hello? Okay, it's better for me.
Thank you for your time.
Yes.
. .
You might have to restart Zoom, maybe.
Dünya, sarılır.
Sure, yeah, I should see it.
Bye-bye.
So there's a share on the Zoom bar.
Okay.
. .
perfect yeah and I just opened the stuff so you just have to put your
name, uh, except just the terms.
. .
Thank you. Mustafa.
Yedik mustada.
Thank you.
Thank you.
You're in, perfect. So what are we gonna do today? So we're gonna.
code a small app, which is a web version of the top command.
So do you know the top command on Linux or Mac?
Okay, so the top comment.
top comment returns a list of processes that are running on your computer.
and you get metadata about the processes. So you get the names, the CPU, it chooses.
when it started, the memory, etc. So for as a reminder, what you see on the
the first screenshot is the top comment result. So we are aiming to do some.
like that. So we're going to have an API that returns data and we're going to...
format them and make it compelling for a user to see, basically.
Okay? That's the end purpose of the exercise, but don't worry, we're good.
to do baby steps for this. And yeah.
All right, change of view.
No, no, don't worry. I will tell you what we're going to do.
Uh, so, uh, and this exercise is conceived.
As you're a developer, you arrive at Datalog and there is already...
already a code base that's here, OK? So I'm going to run you through the code base which.
on the left, the file hierarchy, show you the different folder, components, libraries. This is.
I do this for a purpose, so this might be useful later, so you get a grasp on the project.
and then we will start coding. Is that fine for you? Okay.
So if we go from top to bottom on the API,
processes, top to bottom, the first first five. So processes
This is the fake API we have for this project. So when you hit the processes and point.
it will return a list of fake processes. So you don't have to care about this, but it's just to give you a.
sense of the data we're going to receive. So this is an array of.
process object which contains that part, basically.
There is a component folder and in it there is a JSON view.
viewer TSX. Okay.
There is a title component.
Okay, there is the sleep folder.
with format bytes, format duration.
and then there is page process list, mainly you don't care. Page process.
list is if you go to program output now on the top right.
and it's written hello world, you can write hello Datadog instead of hello world.
just to see if that is to see to see that uh hot reload works let's start with
the basics. Okay, it works.
Yeah, he said that if you don't have an error.
reload the page for this. Can you reload your page just to see if you have a better working
Yeah, yeah.
Yeah, if not, it's not the type script exercises.
JavaScript exercise, but sometimes TypeScript is not working well with CoderPatch.
So. OK, we had the error.
Okay, hopefully we have it back. I'm sorry for this. Okay, and basically we're
going to code most of our app here. So this doesn't mean you have to code.
in the app itself, but we're going to code in this file.
For the sake of time, we don't have time to create files, you know, to import.
So most of the code you're going to do is going to be in a.
pageprocesslist.tsx. But if you want to create a separate component here, you can.
if you you you just tell me oh if I had
time. I would have put this component in this place in the file. So you put a comment or you take
but you will work in this file. Is that fine? OK.
So let's start with a small appetizer. So go on the instruction. You're here.
And as a starter, wait, I'm going to just explain you.
what's happening in this file. So in this file we are hitting the
the API and we're setting the process.
in the states, what we receive from the API in the state. And the
first step of the exercise is to have this nice title. So the second screenshot
activity monitor, and then a nice dump of the data we receive. So this is not.
the final update is just something like to see the data we receive and to have a nice title.
forever. It has to look like this. So the title has to look
fancy and uh and uh and fancy with a
with quotes, and then the data has to look like this on the page.
Thank you very much.
Thank you.
. .
. .
. .
The dump will show everything, like what you see in the activator.
monitor is all the data we receive.
. .
. .
Thank you.
. .
. .
. .
We're doing the second screenshot, not the first one. Second screenshot.
We're doing the second screenshot as an appetizer, not the first one.
So why would you need a table for this?
For the title or for a...
. .
. .
. .
OK, so this is OK.
Go ahead for this. Yeah, the data transfer.
Yes, so, yeah, so.
This will work, but I would advise you to start with the title first, but this is okay.
but it will have to look the same. And you might not have to put a lot. This is a.
existing code base, remember, like, so you might not have
to record everything. So go.
Yeah, yeah, good idea.
Thank you.
. .
Don't worry about the report, I will do that for you. And sometimes it works.
If you write title, it might just import it for you.
Let's see. Let's try.
I was wonder...
I'm sorry.
Good.
Thank you.
Bye-bye.
Thank you.
But nothing works, I expected a...
uh... good day, all of you.
. .
I don't know if it's enough.
Bye-bye. Thank you.
Thank you.
Thank you.
Thank you very much. Bye.
Bye.
Oh, interesting. Yeah, yeah, that's what...
Yeah, go for it.
Don't worry about this, I will do it.
. .
. .
. .
Thank you.
Okay, nice, almost nice.
Thank you.
Yeah, go ahead.
Thank you very much.
. .
Okay, so that's a good remark. Just tell me what you were thinking.
like you don't want to override the basic style or something.
OK, so this is a good remark.
But you can override this time. You can change this time for everybody.
. .
. .
. .
. .
. .
Okay, almost there.
No, this is good, this is...
It's just a bit of a Greek text, so it's bad.
Everything's fine.
You just have the text that has the best color. The rest is OK.
. .
Yep.
Okay, and we're done, we're done for this part.
So this is the appetizer, so your reason is a component, etc. It's fine.
and now we can see the data we received. So as I told you, it's an array of objects.
Each object is a process and it's hard.
for a human to understand this, okay? Big numbers.
like memory. Okay, just it's a real world API. So it's
a quickness. So there is, it's a string, it's a number, you know.
So, it would be nice to have this formatted in a way or another. Start time.
uh hard to read uh a note about start time it's an iso date so
This is something you can pass to a data object in JavaScript. It will always work.
and, you know, CPU, lots of decimals.
Maybe too much. So this is already a percentage, but it has way too much decimal. Okay.
Let's go back to instructions.
and I will open part two, tuk tuk tuk.
I will read, I will read, don't worry.
So now that we're a bit more, so you can, you can ask questions.
Now that we're a bit more familiar with the data, let's start to rebuild the output.
from top. We want to build a static list of processes with just a few fields, so we
want. Basically, the headers should be PID, name,
memory, CPU, and uptime. So it should be formatted like this, you know.
is it's not an exact mapping of what you receive from the
from the backend, and don't worry about formatting for the moment.
we want just a list of data that is formatting, okay? Like a...
basic alignment, it doesn't need to be beautiful at all. So this is not a CSS.
size, you can be very straightforward in your implementation.
Thank you for your attention.
Bye-bye.
. .
Yes. You can create another component, but don't create a file.
you can still do it here. See what I mean? That's what I was talking about.
That's what I was talking about.
. .
. .
. .
. .
It will be a processor, it will be a processor.
Don't be, don't try to be too fast.
see are too generic, let's do it for processes now.
Try to make a, yeah, yeah, that's fine.
The process type is already in the page, so you can use it.
Thank you.
. .
. .
. .
. .
And if you go with the table, I will help you, I will help you. This is a good proposal, don't write it down.
Wait, wait, wait, wait. There you go.
Bye.
It's it's it's basically tabular data so yeah it's perfectly fine that's what I meant by
you don't have to write lots of CSS like I'm totally fine with a with.
Yeah.
. .
. .
. .
. . . .
. .
. .
. .
. .
. .
But you don't have to replicate this.
you have to replicate the fields PID, name, memory, CPU, uptime. So there's no command.
It's not an exact match, like only this in this field, the one on top.
Uh, so it's PID name, okay.
And only five things, basically.
You see what I mean? You don't have to... That's the screenshot, the one we asked on top. It's a...
It's a bit confusing, sorry.
Yeah.
. .
No, no, don't worry, don't worry.
. .
. .
. .
. .
. .
. .
. .
. .
. .
. .
. .
. .
. .
. .
. .
. .
Don't worry about TypeScript. It seems that it doesn't work that well.
Thank you.
Thanks for watching!
It did not work. Sorry for the...
. .
. .
. .
. .
. .
. .
. .
. .
. .
. .
. .
. .
. .
Aha, interesting.
You can find something similar as this.
Good start-
You just do start time for the moment and we'll make it better later.
. . .
Yeah, keep that in mind, we will do it later.
Now, you can use your TableView. You put it on top of the JSON.
Yeah. Okay. Perfect. That's fine. Yep.
Okay, nice. So, from a design perspective, that's what we want.
I want to ask more. So the title are not that well aligned, but.
that's a table default, so we're fine. So yeah, we will do baby steps. So now.
we have the data, it looks better for
for sure, but still hard to understand for humans.
So let's go on the next step on the instruction.
Go back to instructions, up.
So we now have a process case, but it's not very usable at the moment. Numbers are hard to read.
and hard to understand. Can you make this better for a human to read?
Anything that's hard to understand in the list, can you make it look better, more usable?
for a human and also yeah, right, right.
good thing, like for example in start time it's bad, so let's write the good data here also.
. .
. .
. .
. .
. .
. .
Go ahead.
. .
. .
It's a shame we don't have TypeScript working, this is a.
I'm imparting, I'm imparting stuff.
Don't worry. OK.
. .
. .
Thank you.
. .
I'm doing the includes for you, don't worry.
. .
Okay, so what did you do?
I was busy with imports. Okay, so CPU is to fix, so that's perfect.
format bias is good and uptime is still bad like.
is the idea to format duration is good but like it doesn't work so you have to fix this.
. .
. .
. .
. .
. .
. .
. .
You don't have to try catch because...
because the time will always be here and it will always be valid.
. .
. .
. .
Your regrets?
. .
. .
. .
. .
. .
Okay.
Yeah, this is good.
. .
and almost there you you forgot something you told me so you
You told me like, we don't want the start time, we want the up time.
. .
Yeah
Yeah.
That will work. Your minus doesn't want to be...
Okay, okay, so that's good, it's just a
And your start time in AMS is not good, it should be uptime.
You should just rename your variable.
and you'll be fine. Your code is working. This is nice, but this is uptime.
Bye-bye.
Yes. Okay, nice. Wait, wait, you'll be there.
Yeah, okay, we're fine.
Okay, good for the formatting. So, as I told you, we do baby steps, improving our programming.
slowly but surely. Let's go to the next slide.
The next step...
Okay, go to instructions.
Okay, so the top list is more useful when sorted. Let's implement it.
default descending sort for CPU. When I will ask you for a sort, it will always be there.
descending and one sort at a time, okay? So it's not like cumulative sort or anything complicated.
So this is the link for CPU.
Yeah, so it's the first.
time I see the list should be ordered by CPU descending.
Later, later, later we will. Okay. I told you.
So I just I just use a bit that we're going to do so we're going to do a sold by CPU.
Then we're going to comment it, then we're going to do a sort by name.
Okay, and then I will ask you to switch between one and the other if you want to.
like the next, what's the next step in the exercise, but like for them.
Yeah.
. .
. .
. .
It's a shame, it's really a shame TypeScript is not working.
I'm upset, not against you, but against Coderfed.
Yeah, there's something always.
and don't worry it's fine if you if you do if you if you yeah yeah
It's like a USB key, you always put it the wrong way.
OK, that's fine. You have to use it.
Thank you.
This is working. Do you see any issues with using sort?
Like this is working, but like the sort function.
Ah, we don't have, we don't get, we don't see that, but do you see any?
any issue with using the sort function.
No, no. What you're doing in the source is fine.
uh, sorting itself works. Okay. But do you see any issue with
it's stored, the function, like what does its function do?
Does it sort in place?
Does it create a copy?
. .
Yeah, yeah. So how can you fix this?
. .
This is totally fine here.
it just doesn't need to mix it and don't worry about performance or anything start an exercise
about performance, but we still want to make a component that doesn't have side effects.
exists to do not have side effects.
Yeah, perfectly fine.
That's fine. And as a tip for you, we could have done two...
which is not valid everywhere, you need polyfill for this, but two sorted is a.
replacement for sort that does a copy.
too sorted. But don't worry, this is, you know, not...
Not valid everywhere, but I use it because we have the polyfill.
everything and it's pretty cool. Okay, so that's right for me. So, as I told you, now we're...
We are going to comment this up. We're going to copy it up. And we're done.
We're gonna sort by name descending.
So, by name, yep.
. .
. .
. .
. .
. .
You can look up stuff on the web.
on Google, no problem. If you're missing APIs or stuff, go ahead.
. .
As long as you know what to do, you can do it.
look for it's fine.
Yeah, go ahead. Don't worry.
. .
. .
. .
. .
Awesome, yep.
No, A.Name, A.Name.
Okay, we're fine. So as I told you.
Now, we have the two sorts. Let's go back to instruction.
And she... So...
So, yes, that's it. So we know.
something similar to the top common, let's take advantage of our beautiful UI to make things a bit
more interesting. How would you implement interactive sorting? By interactive I mean switching from one...
sort to the other via the UI. It doesn't need to look beautiful.
doesn't need to be accessible, just the main, I don't know, most of you simple...
to switch from one store to the other.
. .
Yes.
. .
. .
I thought 30 is fine inside the.
components. I'm fine with this. Like this is the way we want the component to work.
like we want to pass the data and then internally we can do sorting and stuff so you're fine
So play with us.
. .
. .
. .
. .
. .
. .
. .
. .
. .
. .
Yes.
CPU, CPU by default, CPU.
by default here. I'm opinionated on this. I want the CPU by default.
Bye. Bye. Bye. Bye. Bye.
. .
. .
. .
. .
. .
. .
. .
. .
. .
. .
. .
. .
. .
. .
. .
. .
You can cut and paste it, you already have it, huh?
. .
. .
. .
Good?
Thank you.
Okay. Now, you can continue.
. .
. .
. .
. .
. .
. .
. .
You're the one.
. .
Thank you.
. .
Thank you.
Keep in mind that I might ask you to add more salt later.
I can imagine a table with, I don't know, 10 columns and I ask.
sort for the 10 columns, you would have 10 buttons. What would be the most?
najprostszą i najprostszą stroną do poradzenia.
Is it the way?
like in Excel, for example, or.
Yeah, yeah, the easier the better.
It doesn't need to look beautiful.
Move your fragments up.
. .
Thank you.
. .
. .
. .
. .
. .
. .
. .
. .
OK.
I'm going to try to go somewhere.
. .
Ah, I clicked it for you.
Wait, I know there was a
What is this year, I guess. Okay.
I returned that there is a typo somewhere.
Yeah. Name. Yeah. Yeah.
And mystery.
So data is not defined. You have the console on the bottom right.
On the right panel, you can see the console. If you want, go.
No, you see, there's a right funnel, uh, yeah.
There is console. You can click on console and see the error.
Go on the right, yeah, and click here and you will see.
what's what's happening.
. .
. .
Thank you.
Dirty data is not defined.
. . .
Most sorted data, that's what you had before, was fine.
Thank you.
. .
. .
. .
. .
. .
. .
. .
. .
. .
. .
. .
I'm not sure you need this is a.
sorted data status, you can but like, if you want to do something
like straightforward, you can just do post-sorting data and put your stuff here.
like the stage is gonna give you headaches later, maybe.
Data equals sorted something.
. .
and it's a unit to say cost.
Thank you.
Okay, so let's see if that works. Name, I can.
I click on name, it works. I click on CPU, it works. OK?
So that's Baby Steps. So let's go back to instruction.
For the functionality, it's the last part. Implement auto-refresh.
for the list every two seconds. So every two seconds we should update the.
is a process is a, you know, that are coming for the server. So the initial
refresh and I should see CPU moving and, and single.
I guess.
Yes.
. .
Thank you.
Yep. Thanks. Bye.
Thank you.
This is fine. What you're doing is fine for the moment.
Yeah, I will just do a small type.
not to break your computer okay because like when you're writing it's setting lots of...
offset interval so this is fine and I will fix it later. But what you're doing is good.
Yeah, I'm waiting for you to write this and then
No, we'll remove the table.
Yep.
Perfectly fine for me.
we have a list that refresh every two seconds. So basically, what you did here, this prevents the
bug when we have hot reloading with our interface because you know when you write
it will launch and interview each time because of the reloading.
I had it once but like once it broke like the candidate computer so so
That's why I'm careful about that. So that's nice.
Our app is complete from a technical standpoint, like.
That's what the functionalities are here. OK.
can we make it better? So let's go to instruction again to the last part.
and we can discuss at least. So you.
We now have a full working app. Congrats. Let's discuss on how we could improve.
on the design. For example, like I'm.
What would it require to add or remove a column? What?
we did take to move a column. For example, if
If I talk to a junior developer, can you go to table view?
to the table code, no, no, in the code, yeah.
Yeah, and share. So I'm the PM. I say, oh, uptime should be first.
And like the junior developer comes and say up, up.
saves, finish the day, commits to prod, and then you're.
have been broken, okay? I see uptimes, there is PID, all the columns are bad.
So, how can we make this better? How can we improve our...
component to fix these kind of things.
If you have any questions, please feel free to reach out to me.
. .
Okay, you don't have to go to so look at.
Sorry, it's too much, too much detail for me. Like the confidence.
How can we improve the components?
so we fix this kind of problem because local storage doesn't fix the issue that
if a developer comes and doesn't know the implementation details of your program.
can just move this and think he has fixed everything but
Yeah, it has broken everything because like the declaration of the...
of the headers are here in this place.
And then you do the same thing, so you need to put it to move this one.
to if you want to not break the program. You see? If I want to add a sort, I.
need to go here, OK? So how can we make the component
better to fix those issues.
I'm talking about refactoring the component to make it more
Reusable, shareable, basically. Refine the API.
. .
. .
. .
. .
. .
. .
. .
Bye bye.
Be careful about uptime, okay? Remember there is an uptime.
key which is not in your keys, okay?
Just as a reminder, because if you use the processing, there's no.
uptime in there, so start time. So we have like inferred columns.
Also.
. .
Okay?
. .
Okay, so I'm interested in the first.
uh proposal you had the second you can but like we won't do it for this exercise because it's like
too much time but like you say put that in a loop uh can you uh can you write
structure and start. We don't know if we'll finish, but at least we're seeing how it would look.
. .
I don't know the keys because, oh, okay.
I was thinking more about declaring each column we want.
See what I mean? Like, I want PID.
I won't name memory, CPU, and uptime. And then you will have to get the.
the data in there.
. .
Go ahead with your kids if you want to do object.Kids.
Yeah, is that?
That's why I told you to be wary about uptime, okay.
Yes.
not necessarily an object, but yeah, go ahead.
. .
Okay.
Thank you.
. .
OK.
Okay. Interesting.
. .
You can start to replay my
But this is a good track, so let's try to...
implement something that works with this. And don't worry about the types. Don't worry about typing.
you can just try JavaScript. TypeScript is not working anyway, so.
. .
. .
. .
. .
I wasn't thinking about transforming the data.
Yeah, yeah, okay, to do a config.
Okay, that's good, that's good.
And you need to basically what I want you to do.
Yeah, I want you to do this and tell me what's in there.
. .
. .
Yeah.
. .
I didn't write the type of it, I put any here.
I'll have to guess it.
. .
Yeah, whatever his name is. I like the configuration.
20th century and luxury concept. cooperation. So this is kind of This is kind of fantastic Because then So this is kind of fantastic So this is kind of fantastic So this is kind of fantastic So this is this country concept. country concept.
So I don't want pipes here, I want the real, what you will put as the data.
Don't put key of process. I would like you to make the config for two columns.
make a table with CPU.
and a coffee.
. .
. .
. .
. .
Yep.
. .
OK.
OK.
Interesting.
. .
. .
. .
. .
I'll put name, I'll put it for you.
Yeah.
. .
. .
Thank you. Bye. Bye.
Format name will be the same.
Do you see, just a question, so this is.
Not bad, but what if I ask you, I want a virgule?
and columns with
a CPU concatenated two names.
I want a column which contains both of them at the same time.
I want this. I'll show you.
CPU and earning.
. .
Okay, that's a good idea. So pass it everywhere so that we'll
make your format function generic or, okay.
Yeah, that's it.
Sir.
. .
Okay, yeah, yeah, yeah, you got the idea. I think we're
We do not have the time to do the Fulbright Factor, but we're, you know, getting to...
So basically now we want to use your DSTACK config. We won't do it. We stop coding.
Now, I'm just wrapping up. But basically, user display config, we
can loop over the display config, after we can use the display config.
in the body also, where you have...
the formatting so basically you it's one social proof so
And the fact that display config is outside the table view makes it.
that you can make, we can put sorting also here, later.
field and all the all the dependency will be outside.
your table will just use your config and your config can have crazy sorting functions.
a crazy formatting functions, but it's not in the tables. The table just does it.
its job. So that's the exercise you can inspire by.
I don't know if she used it.
Okay, we are heavy users of Reactable and Datalog, so we're pretty.
familiar with this pattern and what it allows to do. Yours, not that much.
Maybe it can, but it's a side effect. You could reorder the columns.
uh if it was an array just by doing this here it's an
Yeah, here it's an object so you're not sure about this, but if it was an array, you would be sure.
So it could be a knuckle.
. .
No, no, you don't need to, if you don't need to.
do this. If you do this, yeah.
So that's the point, like if you have a good data structure, you don't even have to care about ordering.
Array will do the ordering stuff. It will be naive, of course.
It won't be like something crazy, but if I change the order of the column, it will change in the code and I
don't have to keep track of anything. My loop will do the work. Okay.
Okay, so we are fine for the exercise, I will end the interview.
Don't worry, we can have a small talk before. Take a look.
You can stop sharing your screen.
And now I'm here if you want to ask any question about front-end.
or anything we can discuss, any questions?
question you have or anything.
How's that? Yes. Okay.
. .
You
. .
Thank you.
Okay, it depends. So we have Platinum Teams.
So platform teams are working for everybody. For example, data viz, our viz,
are centralized somewhere and people are working component-based.
they try to make nice components that will work everywhere that are... I don't say the...
The rest is not well documented, but that are well documented. We call them toolkit components. When you share something.
Across the whole database, we expect a certain quality, which
it's a bit less when you're in your application.
So testing in shared libraries is way higher than the one when you're doing the
We call it runtime code when you code for your app. It's like that, but you use code from the other.
And the cut for the others is like the component base. So these are the platform team.
Some people are working for, I don't know, authentication.
user stuff. I told you, visualization, and the
The rest of the team for the moment, for example, myself, I'm working in the product team. I'm doing.
page-based stuff, but using components I built for my app that are now available.
are shared, and the components that comes from the platform teams. So it's a mix of.
both depending on the work on the team you're working on.
. .
No, I don't know what it is.
It's a vague word for me, but we are a React app. We have a design system.
and the monolith. We're working on the same...
a front-end model it, like there are other, we split
from the others. We have a Go repository.
Java repository and a ton of backend repository. But the frontend.
is the monolith. It's 10 million lines of TypeScript.
That is good, I think, for our base.
and the age of the code base were quite good. Like we migrated.
